<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="StringErrorDocumentationFileNotFoundInProjectFile" xml:space="preserve">
    <value>Please ensure you have selected the XML documentation file as output in your test project! - Have you selected the right project? - The project {0} does not have XML documentation  associated</value>
  </data>
  <data name="StringErrorFileNotFound" xml:space="preserve">
    <value>The {0} file was not found!</value>
  </data>
  <data name="StringErrorInvalidArguments" xml:space="preserve">
    <value>Invalid Arguments! Please enter: Arepa.exe -ProjectDir &lt;Test Project Directory&gt; -TestDir &lt;Test directory where the reports are located&gt;</value>
  </data>
  <data name="StringErrorNoFeaturesFound" xml:space="preserve">
    <value>You must have at least one feature in your test project to continue! - Ensure you have selected the test project before run Arepa - Are you missing the @Feature: key? - No features were found on {0}</value>
  </data>
  <data name="StringErrorNoFeaturesFoundForScenario" xml:space="preserve">
    <value>Are you missing the @Feature: key? - The scenario {0} does not have feature associated!</value>
  </data>
  <data name="StringErrorNoMSTestFileFound" xml:space="preserve">
    <value>Please ensure you have entered the right test directory name or you have run the test at least once! - No MSTest file found at {0} </value>
  </data>
  <data name="StringErrorNoProjectFileFound" xml:space="preserve">
    <value>Please ensure you have entered the right project directory name - No project file found at {0}</value>
  </data>
  <data name="StringErrorNoScenarioDescriptionOnMethod" xml:space="preserve">
    <value>No scenario description was found in the scenario &lt;{0}&gt; on method {1}!</value>
  </data>
  <data name="StringErrorNoScenariosOnFeature" xml:space="preserve">
    <value>Are you missing the @Scenario: key? - No scenarios were found in the feature &lt;{0}&gt; on class {1}!</value>
  </data>
  <data name="StringErrorNoTestResultsFound" xml:space="preserve">
    <value>No test results where found in the test report {0} for any scenario defined in the documentation file {1}</value>
  </data>
  <data name="StringErrorNoTitleFoundOnFeature" xml:space="preserve">
    <value>No title was found in the feature on class {0}!</value>
  </data>
  <data name="StringErrorNoTitleOnScenario" xml:space="preserve">
    <value>No title was found in the scenario on method {0}!</value>
  </data>
  <data name="StringErrorNoUserStoryOnFeature" xml:space="preserve">
    <value>No user story was found in the feature on class {0}!</value>
  </data>
  <data name="StringErrorReportTemplateNotFound" xml:space="preserve">
    <value>Hummmm the report template for the scenario or the feature or the test report was not found!</value>
  </data>
  <data name="StringFinishingMessage" xml:space="preserve">
    <value>========== Arepa {0} finished at {1} - Total execution time {2} ==========</value>
  </data>
  <data name="StringInformationNoErrorOrSuggestion" xml:space="preserve">
    <value>Wow, no errors or suggestions were found in your test project. All good!</value>
  </data>
  <data name="StringInformationReportGeneratedSuccessfully" xml:space="preserve">
    <value>The Arepa report was successfully generated at {0}</value>
  </data>
  <data name="StringReportDefaultDescription" xml:space="preserve">
    <value>Project description not found!</value>
  </data>
  <data name="StringReportNo" xml:space="preserve">
    <value>NO</value>
  </data>
  <data name="StringReportYes" xml:space="preserve">
    <value>YES</value>
  </data>
  <data name="StringStartingMessage" xml:space="preserve">
    <value>========== Arepa {0} started at {1} ==========</value>
  </data>
  <data name="StringTemplateError" xml:space="preserve">
    <value>ERROR: {0}</value>
  </data>
  <data name="StringTemplateInformation" xml:space="preserve">
    <value>Arepa -&gt; {0}</value>
  </data>
</root>